---
meta:
  name:    sample-python-flask-app
  target:  sw
  url:     https://ci.starkandwayne.com

  initial_version: 1.1.0

  bosh-lite:
    target: https://10.58.111.49:25555
    username: (( vault "secret/bosh-lites/lite49/users/admin:username" ))
    password: (( vault "secret/bosh-lites/lite49/users/admin:password" ))
    cacert:   (( vault "secret/bosh-lites/lite49/certs:rootCA.pem" ))

  aws:
    bucket: simple-python-flask-app-boshrelease
    access_key: (( vault "secret/aws/cfcommunity:access" ))
    secret_key: (( vault "secret/aws/cfcommunity:secret" ))

  github:
    owner:  cloudfoundry-community
    repo:   (( grab meta.pipeline ))
    branch: master
    private_key:  (( vault "secret/pipelines/shared/github:private_key" ))
    access_token: (( vault "secret/pipelines/shared/github:access_token" ))

  slack:
    webhook: (( vault "secret/pipelines/" meta.pipeline "/slack:webhook" ))
    channel: '#python'
    username: starkandwayne-ci
    icon:     https://www.starkandwayne.com/assets/images/shield-blue-50x50.png
    blob_success:  '(( concat "$BUILD_PIPELINE_NAME: New version of $BUILD_JOB_NAME was detected, and updated in master. <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME| Cut a new release?>" ))'
    blob_failure:  '(( concat "$BUILD_PIPELINE_NAME: :airplane_arriving: <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to update the blob for $BUILD_JOB_NAME>" ))'

resource_types:
- name: pypi
  type: docker-image
  source:
    repository: cfplatformeng/concourse-pypi-resource

groups:
- name: blobs
  jobs:
  - pip
  - setuptools
  - virtualenv
  - wheel

resources:
  - name: pip
    type: pypi
    source:
      name: pip
      username: (( vault "secret/python-pypi/bot:username" ))
      password: (( vault "secret/python-pypi/bot:password" ))
  - name: setuptools
    type: pypi
    source:
      name: setuptools
      username: (( vault "secret/python-pypi/bot:username" ))
      password: (( vault "secret/python-pypi/bot:password" ))
  - name: virtualenv
    type: pypi
    source:
      name: virtualenv
      username: (( vault "secret/python-pypi/bot:username" ))
      password: (( vault "secret/python-pypi/bot:password" ))
  - name: wheel
    type: pypi
    source:
      name: wheel
      username: (( vault "secret/python-pypi/bot:username" ))
      password: (( vault "secret/python-pypi/bot:password" ))

jobs:
- name: pip
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: pip, trigger: true }
  - task: update-pip
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: pip
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    pip
        BLOB_NAME:   pip
        BLOB_BINARY: pip-*-py2.py3-none-any.whl
        BLOB_URL:    https://pypi.python.org/pypi/pip/
        BLOB_CLEANUP:     python/pip-.*
        BLOB_DESTINATION: python/pip-${VERSION}-py2.py3-none-any.whl
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

- name: setuptools
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: setuptools, trigger: true }
  - task: update-setuptools
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: setuptools
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    setuptools
        BLOB_NAME:   setuptools
        BLOB_BINARY: setuptools-*-py2.py3-none-any.whl
        BLOB_URL:    https://pypi.python.org/pypi/setuptools/
        BLOB_CLEANUP:     python/setuptools-.*
        BLOB_DESTINATION: python/setuptools-${VERSION}-py2.py3-none-any.whl
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

- name: virtualenv
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: virtualenv, trigger: true }
  - task: update-virtualenv
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: virtualenv
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    virtualenv
        BLOB_NAME:   virtualenv
        BLOB_BINARY: virtualenv-*-py2.py3-none-any.whl
        BLOB_URL:    https://pypi.python.org/pypi/virtualenv/
        BLOB_CLEANUP:     python/virtualenv-.*
        BLOB_DESTINATION: python/virtualenv-${VERSION}-py2.py3-none-any.whl
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

- name: wheel
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: wheel, trigger: true }
  - task: update-wheel
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: wheel
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    wheel
        BLOB_NAME:   wheel
        BLOB_BINARY: wheel-*-py2.py3-none-any.whl
        BLOB_URL:    https://pypi.python.org/pypi/wheel/
        BLOB_CLEANUP:     python/wheel-.*
        BLOB_DESTINATION: python/wheel-${VERSION}-py2.py3-none-any.whl
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
